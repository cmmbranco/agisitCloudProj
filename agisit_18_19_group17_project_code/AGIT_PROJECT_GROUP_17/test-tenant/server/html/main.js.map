{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///./src/model/InputRequest.ts","webpack:///./src/service/main-service.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div class=\\\"container\\\">\\n  <div class=\\\"ui-g\\\">\\n    <div class=\\\"ui-g-12\\\">\\n      <p-panel header=\\\"Input data\\\" [style]=\\\"{'margin-bottom':'20px'}\\\">\\n        <div class=\\\"ui-g\\\">\\n          <div class=\\\"ui-g-6\\\">\\n            <span class=\\\"ui-float-label\\\" style=\\\"margin-top: 15px; margin-bottom: 40px\\\">\\n              <input id=\\\"sizesOfTrucks-input\\\" #input1\\n                     (input)=\\\"input1.value=$event.target.value.toUpperCase(); sizesOfTrucks = $event.target.value.toUpperCase()\\\"\\n                     [(ngModel)]=\\\"sizesOfTrucks\\\" type=\\\"text\\\" size=\\\"50\\\" pInputText>\\n              <label for=\\\"sizesOfTrucks-input\\\">Sizes of trucks</label>\\n            </span>\\n            <span class=\\\"ui-float-label\\\" style=\\\"margin-top: 15px; margin-bottom: 40px\\\">\\n              <input id=\\\"mean-input\\\" #input2\\n                     (input)=\\\"input2.value=$event.target.value.toUpperCase(); mean = $event.target.value.toUpperCase()\\\"\\n                     [(ngModel)]=\\\"mean\\\" type=\\\"text\\\" size=\\\"50\\\" pInputText>\\n              <label for=\\\"mean-input\\\">Mean (μ)</label>\\n            </span>\\n            <span class=\\\"ui-float-label\\\" style=\\\"margin-top: 15px; margin-bottom: 40px\\\">\\n              <input id=\\\"sdeviation-input\\\" #input2\\n                     (input)=\\\"input2.value=$event.target.value.toUpperCase(); sdeviation = $event.target.value.toUpperCase()\\\"\\n                     [(ngModel)]=\\\"sdeviation\\\" type=\\\"text\\\" size=\\\"50\\\" pInputText>\\n              <label for=\\\"sdeviation-input\\\">Standard deviation (σ)</label>\\n            </span>\\n            <span class=\\\"ui-float-label\\\" style=\\\"margin-top: 15px; margin-bottom: 40px\\\">\\n              <input id=\\\"powerOfSamples-input\\\" #input3\\n                     (input)=\\\"input3.value=$event.target.value.toUpperCase(); powerOfSamples = $event.target.value.toUpperCase()\\\"\\n                     [(ngModel)]=\\\"powerOfSamples\\\" type=\\\"text\\\" size=\\\"50\\\" pInputText>\\n              <label for=\\\"powerOfSamples-input\\\">Number of samples (10 to the x power)</label>\\n            </span>\\n          </div>\\n        </div>\\n        <div style=\\\"text-align: center; margin-top: 30px\\\">\\n          <!--<button style=\\\"width: 22%\\\" pButton type=\\\"button\\\" class=\\\"ui-button-secondary\\\" (click)=\\\"setExampleData()\\\" icon=\\\"fa-clipboard\\\" label=\\\"Przykładowe dane\\\"></button>-->\\n          <button style=\\\"width: 30%\\\" pButton type=\\\"button\\\" (click)=\\\"execute()\\\" label=\\\"Execute\\\"></button>\\n          <!--<button style=\\\"width: 22%\\\" pButton type=\\\"button\\\" (click)=\\\"runStepAlgorithm()\\\" icon=\\\"fa-forward\\\" label=\\\"Uruchom algorytm krokowo\\\"></button>-->\\n          <!--<button style=\\\"width: 22%\\\" pButton type=\\\"button\\\" (click)=\\\"nextStep()\\\" icon=\\\"fa-step-forward\\\" [disabled]=\\\"!showNextStepBtn\\\" label=\\\"Następny krok\\\"></button>-->\\n        </div>\\n      </p-panel>\\n    </div>\\n  </div>\\n</div>\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\nimport { MainService } from  '../service/main-service';\nimport {InputRequest} from \"../model/InputRequest\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  sizesOfTrucks: string;\n  powerOfSamples: number;\n  mean: number;\n  sdeviation: number;\n\n  constructor (private  mainService:  MainService) {\n    this.sizesOfTrucks = '5 15 30 50';\n    this.powerOfSamples = 6;\n    this.mean = 25;\n    this.sdeviation = 0.2;\n  }\n\n  execute () {\n    var request = new InputRequest(this.sizesOfTrucks, this.powerOfSamples, this.mean, this.sdeviation);\n\n    this.mainService.executeGCProcess(request).subscribe((response) => {\n      console.log(response);\n    });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms'\nimport { HttpClientModule } from  '@angular/common/http';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport {PanelModule} from 'primeng/panel';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {ButtonModule} from 'primeng/button';\nimport {InputTextareaModule} from 'primeng/inputtextarea';\nimport {TableModule} from \"primeng/table\";\nimport { MainService } from '../service/main-service';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    NoopAnimationsModule,\n    AppRoutingModule,\n    PanelModule,\n    InputTextModule,\n    ButtonModule,\n    TableModule,\n    InputTextareaModule\n  ],\n  providers: [\n    MainService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","export class InputRequest {\n  sizesOfTrucks: string;\n  powerOfSamples: number;\n  mean: number;\n  sdeviation: number;\n\n  constructor(sizesOfTrucks, powerOfSamples, mean, sdeviation) {\n    this.sizesOfTrucks = sizesOfTrucks;\n    this.powerOfSamples = powerOfSamples;\n    this.mean = mean;\n    this.sdeviation = sdeviation;\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { InputRequest } from \"../model/InputRequest\";\nimport { GCResponse } from \"../model/GCResponse\";\nimport \"rxjs/add/operator/map\";\nimport \"rxjs/operator/delay\";\nimport \"rxjs/operator/mergeMap\";\nimport \"rxjs/operator/switchMap\";\n\n@Injectable()\nexport class MainService {\n  constructor(public httpClient: HttpClient) {}\n\n  executeGCProcess(request) {\n    // // var ip = window.location.origin; // this will give you the ip:port\n    // var ip = this.httpClient.get(\"https://jsonip.com\").subscribe(ipOfNetwork => {\n    //   return ipOfNetwork[\"ip\"];\n    // });\n\n    return this.httpClient.post(\n      \"http://\" + location.host + \":5000/api/GoogleCloudResponse\",\n      request\n    );\n  }\n}\n"],"sourceRoot":""}